pipeline {
  agent {
    docker 
    {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  parameters {
        string(name: 'DOCKER_TAG', defaultValue: 'latest', description: 'Docker Tag (e.g., latest, v1.0.0)')
    }
  environment {
        DOCKER_IMAGE = "spring-image"  // Replace with your Docker image name
        // DOCKER_TAG = "latest"                    // Replace with your desired tag (e.g., latest, v1.0.0)
        DOCKER_REGISTRY = "https://index.docker.io/v1/" // Replace with your Docker registry (e.g., Docker Hub, AWS ECR, etc.)
        DOCKER_CREDENTIALS_ID = "docker_cred" // Jenkins credentials ID for Docker login
        DOCKER_USERNAME= "dheerajkr7866"
    }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
      }
    }
    // stage('Build and Test') {
    //   steps {
    //     sh 'ls -ltr'
    //     // build the project and create a JAR file
    //     sh 'cd spring-boot-app && mvn clean package'
    //   }
    // }
    // stage('Static Code Analysis') {
    //   environment {
    //     SONAR_URL = "http://172.29.79.38:9000"
    //   }
    //   steps {
    //     withCredentials([string(credentialsId: 'sonar-qube-token', variable: 'SONAR_AUTH_TOKEN')]) {
    //       sh 'cd spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
    //     }
    //   }
    // }
    // stage('Build and Push Docker Image') {
    //   environment {
    //     DOCKER_IMAGE = "abhishekf5/ultimate-cicd:${BUILD_NUMBER}"
    //     // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
    //     REGISTRY_CREDENTIALS = credentials('docker-cred')
    //   }
    //   steps {
    //     script {
    //         sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
    //         def dockerImage = docker.image("${DOCKER_IMAGE}")
    //         docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
    //             dockerImage.push()
    //         }
    //     }
    //   }
    // }
    stage('Docker Build') {
            steps {
                script {
                    // Build the Docker image
                    sh "cd spring-boot-app/"
                    sh "pwd"
                    sh "cd spring-boot-app/ && docker build -t ${DOCKER_USERNAME}/${DOCKER_IMAGE}:${params.DOCKER_TAG} ."
                }
            }
        }

        stage('Docker Push') {
            steps {
                script {
                    // Log in to the Docker registry
                    docker.withRegistry("${DOCKER_REGISTRY}", "${DOCKER_CREDENTIALS_ID}") {
                        // Push the Docker image to the registry
                        sh "docker push ${DOCKER_USERNAME}/${DOCKER_IMAGE}:${DOCKER_TAG}"
                    }
                }
            }
        }
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
            GIT_USER_NAME = "iam-veeramalla"
        }
        steps {
            withCredentials([string(credentialsId: 'jenkins_cred', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "dheerajkr7866@gmail.com"
                    git config user.name "Dheeraj"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
  }
}
